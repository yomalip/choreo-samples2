/*
 * Copyright (c) 2023, WSO2 LLC. (https://www.wso2.com/) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"github.com/sirupsen/logrus"

	"github.com/wso2/choreo-sample-apps/go/rest-api/api/routes"
	"github.com/wso2/choreo-sample-apps/go/rest-api/docs" // docs are generated by Swag CLI.
	"github.com/wso2/choreo-sample-apps/go/rest-api/internal/config"
	"github.com/wso2/choreo-sample-apps/go/rest-api/internal/utils"
)

// This is an example of a REST API service that manages a list of reading items.
//
//	@title			Choreo Reading List
//	@version		1.0
//	@description	This is a sample service that manages a list of reading items.
//	@host			localhost:8080
//	@BasePath		/api/v1/reading-list
func main() {
	app := fiber.New(fiber.Config{
		AppName:               "choreo-reading-list",
		ReadTimeout:           time.Second * 2,
		Prefork:               false,
		DisableKeepalive:      true,
		DisableStartupMessage: true,
		ErrorHandler:          utils.FiberErrorHandler,
	})
	app.Get("/swagger/*", swagger.HandlerDefault) // default

	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}

	docs.SwaggerInfo.Host = fmt.Sprintf("%s:%d", cfg.Hostname, cfg.Port)

	routes.Initialize(app)

	go func() {
		logrus.WithFields(logrus.Fields{"port": cfg.Port}).Info("Choreo Reading List service is starting...")

		if err := app.Listen(fmt.Sprintf(":%d", cfg.Port)); err != nil {
			log.Fatalf("failed to start server: %v", err)
		}
	}()

	sigtermC := make(chan os.Signal, 1)
	signal.Notify(sigtermC, os.Interrupt, syscall.SIGTERM)

	<-sigtermC // block until SIGTERM is received
	logrus.Info("SIGTERM received: gracefully shutting down...")

	if err := app.Shutdown(); err != nil {
		logrus.Errorf("server shutdown error: %v", err)
	}
}
